name: ci-workflow
run-name: ${{ github.actor }} Sentiment Analysis GitHub Actions

on:
  push:
    paths:
      - "**.py"
      - "**.tf*"
      - "**.yaml"
      - "**.yml"
    branches:
      - main
  pull_request:
    paths:
      - "**.py"
      - "**.tf*"
      - "**.yaml"
      - "**.yml"
    branches:
      - main

env:
  TF_VERSION: "1.10.5"
  AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
  AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
  TF_VAR_subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

permissions:
  id-token: write
  contents: read

jobs:
  terraform:
    name: Deploy AKS with Terraform
    runs-on: ubuntu-latest
    steps:
      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}
          # cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Cache Terraform Providers & Plugins
        uses: actions/cache@v4
        with:
          path: |
            aks/.terraform
            aks/.terraform.lock.hcl
          key: ${{ runner.os }}-terraform-${{ hashFiles('aks/.terraform.lock.hcl') }}
          restore-keys: |
            ${{ runner.os }}-terraform-

      - name: Terraform Init
        run: terraform init
        working-directory: aks/

      - name: Terraform Format
        run: terraform fmt
        working-directory: aks/

      - name: Terraform Validate
        run: terraform validate
        working-directory: aks/

      - name: Terraform Plan
        run: terraform plan -out=tfplan
        working-directory: aks/

      - name: Terraform Apply
        id: terraformApply
        run: terraform apply tfplan
        working-directory: aks/

      - name: Terraform Rollback
        if: failure() && steps.terraformApply.outcome == 'failure'
        run: terraform destroy -auto-approve
        working-directory: aks/

      - name: Upload Terraform Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: terraform-artifacts
          path: |
            aks/tfplan
            aks/terraform.tfstate

#   docker-build-push:
#     name: Build & Push Docker Images
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout Repository
#         uses: actions/checkout@v3

#       - name: Login to DockerHub
#         run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ vars.DOCKERHUB_USERNAME }}" --password-stdin

#       - name: Build & Push `proper_model`
#         run: |
#           docker build -t axoy/sentiment-analysis-proper_model:latest ./proper_model
#           docker push axoy/sentiment-analysis-proper_model:latest

#       - name: Build & Push `fallback_model`
#         run: |
#           docker build -t axoy/sentiment-analysis-fallback_model:latest ./fallback_model
#           docker push axoy/sentiment-analysis-fallback_model:latest
