name: ci-workflow
run-name: ${{ github.actor }} Sentiment Analysis GitHub Actions

on:
  push:
    paths:
      - "**.py"
      - "**.tf*"
      - "**.yaml"
      - "**.yml"
    branches:
      - main
  pull_request:
    paths:
      - "**.py"
      - "**.tf*"
      - "**.yaml"
      - "**.yml"
    branches:
      - main

env:
  TF_VERSION: "1.10.5"
  AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
  AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
  TF_VAR_subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

permissions:
  id-token: write
  contents: read

jobs:
  deploy_aks:
    name: Deploy AKS with Terraform
    runs-on: ubuntu-latest
    steps:
      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}
          # cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Cache Terraform Providers & Plugins
        uses: actions/cache@v4
        with:
          path: |
            aks/.terraform
            aks/.terraform.lock.hcl
          key: ${{ runner.os }}-terraform-${{ hashFiles('aks/.terraform.lock.hcl') }}
          restore-keys: |
            ${{ runner.os }}-terraform-

      - name: Terraform Init
        run: terraform init
        working-directory: aks/

      - name: Terraform Format
        run: terraform fmt
        working-directory: aks/

      - name: Terraform Validate
        run: terraform validate
        working-directory: aks/

      - name: Terraform Plan
        run: terraform plan -out=tfplan
        working-directory: aks/

      - name: Terraform Apply
        id: terraformApply
        run: terraform apply tfplan
        working-directory: aks/

      - name: Terraform Rollback
        if: failure() && steps.terraformApply.outcome == 'failure'
        run: terraform destroy -auto-approve
        working-directory: aks/

      - name: Upload Terraform Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: terraform-artifacts
          path: |
            aks/tfplan

  get_ingress_ip:
    name: Extract Ingress IP
    runs-on: ubuntu-latest
    needs: deploy_aks
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Get AKS Credentials
        run: az aks get-credentials --resource-group aks-resource-group --name sentiment-aks --overwrite-existing

      - name: Extract Ingress IP
        id: ingressip
        run: |
          # Wait for ingress to be ready
          kubectl wait --namespace default \
            --for=condition=Ready ingress/web-ui-ingress \
            --timeout=120s

          # Extract IP from ingress
          IP=$(kubectl get ingress web-ui-ingress -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          echo "INGRESS_IP=$IP" >> $GITHUB_ENV

  test_ingress:
    name: Test Ingress (Root & /predict)
    runs-on: ubuntu-latest
    needs: get_ingress_ip
    steps:
      - name: Echo Ingress IP
        run: echo "Ingress IP is $INGRESS_IP"

      - name: Test Root Path
        run: |
          echo "Probing root path..."
          curl -v http://${{ env.INGRESS_IP }}/

  test_proper_model:
    name: Test Proper Model
    runs-on: ubuntu-latest
    needs: [test_ingress]
    steps:
      - name: Test Predict Endpoint (Proper Model)
        run: |
          echo "Testing /predict"
          curl -X POST \
            -H "Content-Type: application/json" \
            -d '{"text":"I love this product!"}' \
            -v http://${{ env.INGRESS_IP }}/predict

  test_failover:
    name: Simulate Failover to Fallback
    runs-on: ubuntu-latest
    needs: [test_ingress]
    steps:
      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Get AKS Credentials
        run: az aks get-credentials --resource-group aks-resource-group --name sentiment-aks --overwrite-existing

      - name: Scale Down Proper Model
        run: |
          kubectl scale deployment proper-model --replicas=0
          kubectl rollout status deployment/fallback-model --timeout=60s

      - name: Test Predict Endpoint (Fallback Model)
        run: |
          echo "Testing /predict after failover"
          curl -X POST \
            -H "Content-Type: application/json" \
            -d '{"text":"Now we test fallback!"}' \
            -v http://${{ env.INGRESS_IP }}/predict

      - name: Scale Up Proper Model
        run: |
          kubectl scale deployment proper-model --replicas=1
          kubectl rollout status deployment/proper-model --timeout=60s

  destroy_aks:
    name: Destroy AKS with Terraform
    runs-on: ubuntu-latest
    needs: [test_failover]
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Destroy
        run: terraform destroy -auto-approve
        working-directory: aks/
